# standardize continuous columns
# impute missing values with mean for continuous variables
n_features <- dim(covar)[2]
for (j in 1:n_features){
col_name <- colnames(covar)[j]
if (!(col_name %in% cat_cols) & !(col_name %in% c('left', 'right'))){
print(str_c('standarizing ', col_name))
# standardize
values <- covar[, j][[1]]
values <- (values - mean(values, na.rm=T)) / sd(values, na.rm=T)
# mean impute i.e. replace with 0 since we standardized
nan_mask <- is.na(values)
print(str_c(col_name, ' has ', sum(nan_mask), ' missinig values'))
values[nan_mask] <- 0.0
covar[, j] <- values
}
}
# survival vs. homelessness, marginal analysis -----------------------------------------------
homleless_surv_curves <- icfit(Surv(left, right, type='interval2')~homeless, data=covar)
png(file=str_c(save_dir, 'homeless_vs_retention_survival_curve.png'),
width=500, height=400)
plot(homleless_surv_curves,
COL=c('red', 'blue'),
YLAB='Retention', XLAB='Days')
dev.off()
homeless_vs_surv_test <- ictest(Surv(left, right, type='interval2')~homeless, data=covar)
print(homeless_vs_surv_test)
# load packages  -----------------------------------------------------------------
# install required packages
# borrowed from https://stackoverflow.com/questions/9341635/check-for-installed-packages-before-running-install-packages
requiredPackages = c('mgm','tidyverse')
for(p in requiredPackages){
if(!require(p,character.only = TRUE)) install.packages(p)
library(p,character.only = TRUE)
}
library(mgm)
library(tidyverse)
# setup paths -------------------------------------------------------------
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
# stop("At least one argument must be supplied", call.=FALSE)
top_dir <- './'
} else{
top_dir <- args[1]
}
print(top_dir)
temp_save_dir = str_c(top_dir, 'temp_data/')
save_dir = str_c(top_dir, 'results/')
# temp_save_dir = '/Users/iaincarmichael/Dropbox/Research/substance_abuse/homeless_vs_retention/temp_data/'
# save_dir = '/Users/iaincarmichael/Dropbox/Research/substance_abuse/homeless_vs_retention/results/'pbox/Research/substance_abuse/homeless_vs_retention/results/'
# cov_fpath = str_c(temp_save_dir, 'covariates.csv')  # raw covariates with NaNs
cov_fpath = str_c(temp_save_dir, 'covariates_imputed.csv')
surv_int_fpath = str_c(temp_save_dir, 'ret_intvals.csv')
cat_cols_fpath = str_c(temp_save_dir, 'cat_cols.csv')
# load data ---------------------------------------------------------------
covar <- read_csv(cov_fpath) %>%  select(-EncPatientID)  # drop subject ids
cat_cols <- read_csv(cat_cols_fpath)[[1]]
surv_interval <- read_csv(surv_int_fpath) %>%  select(-EncPatientID)  # drop subject ids
dim(covar)
var_names <- colnames(covar)
# TODO: what to do about this
# covar <- covar %>% filter(work != '0.0')
# code missing with a string
for (col in cat_cols){
values <- covar[, col][[1]] %>% as.character
print(str_c(col, ' has ', sum(is.na(values)), ' missing values'))
values[is.na(values)] <- 'missing'
covar[, col] <- values %>%  as.factor
}
# format data for input to mgm
n_features <- dim(covar)[2]
col_types <- map(covar, class)
dtypes <- rep('g', n_features)
n_levels <- rep(1, n_features)
X <- matrix(NA, nrow=dim(covar)[1], ncol=n_features)
for(j in 1:n_features){
if(col_types[[j]] == 'factor'){
dtypes[j] <- 'c'
n_levels[j] <- covar[, j][[1]] %>% levels %>% length
X[, j] <- as.numeric(covar[, j][[1]]) - 1
print(colnames(covar)[j])
for(l in 0:(n_levels[j]-1)){
print(str_c(l, ' ', sum(X[, j] == l)))
}
print('')
print('')
} else{
X[, j] <- covar[, j][[1]]
}
}
colnames(X) <- colnames(covar)
# fit graphical model -----------------------------------------------------
covar_gm <- mgm(data=X, type=dtypes, level=n_levels)
# output results ----------------------------------------------------------
A <- round(covar_gm$pairwise$wadj, 2)
rownames(A) <- colnames(covar)
colnames(A) <- colnames(covar)
A[1, ]
names(A[1, ][A[1, ] > 0 ])
# Visualize using qgraph()
library(qgraph)
png(file=str_c(save_dir, 'graphical_model.png'),
width=1000, height=800, # res=5000,
pointsize=15)
qgraph(covar_gm$pairwise$wadj,
edge.color = covar_gm$pairwise$edgecolor,
layout = "spring",
lty=covar_gm$pairwise$edge_lty,
labels =  colnames(covar))
dev.off()
# cov_fpath = str_c(temp_save_dir, 'covariates.csv')  # raw covariates with NaNs
cov_fpath = str_c(temp_save_dir, 'covariates_imputed.csv')
surv_int_fpath = str_c(temp_save_dir, 'ret_intvals.csv')
cat_cols_fpath = str_c(temp_save_dir, 'cat_cols.csv')
covar <- read_csv(cov_fpath) %>%  select(-EncPatientID)  # drop subject ids
temp_save_dir
print(top_dir)
# stop("At least one argument must be supplied", call.=FALSE)
top_dir <- '../'
temp_save_dir = str_c(top_dir, 'temp_data/')
save_dir = str_c(top_dir, 'results/')
# cov_fpath = str_c(temp_save_dir, 'covariates.csv')  # raw covariates with NaNs
cov_fpath = str_c(temp_save_dir, 'covariates_imputed.csv')
surv_int_fpath = str_c(temp_save_dir, 'ret_intvals.csv')
cat_cols_fpath = str_c(temp_save_dir, 'cat_cols.csv')
covar <- read_csv(cov_fpath) %>%  select(-EncPatientID)  # drop subject ids
cat_cols <- read_csv(cat_cols_fpath)[[1]]
covar <- read_csv(cov_fpath) %>%  select(-EncPatientID)  # drop subject ids
# stop("At least one argument must be supplied", call.=FALSE)
top_dir <- '../../'
if (length(args)==0) {
# stop("At least one argument must be supplied", call.=FALSE)
top_dir <- '../../'
} else{
top_dir <- args[1]
}
print(top_dir)
temp_save_dir = str_c(top_dir, 'temp_data/')
save_dir = str_c(top_dir, 'results/')
# cov_fpath = str_c(temp_save_dir, 'covariates.csv')  # raw covariates with NaNs
cov_fpath = str_c(temp_save_dir, 'covariates_imputed.csv')
surv_int_fpath = str_c(temp_save_dir, 'ret_intvals.csv')
cat_cols_fpath = str_c(temp_save_dir, 'cat_cols.csv')
covar <- read_csv(cov_fpath) %>%  select(-EncPatientID)  # drop subject ids
cat_cols <- read_csv(cat_cols_fpath)[[1]]
surv_interval <- read_csv(surv_int_fpath) %>%  select(-EncPatientID)  # drop subject ids
dim(covar)
var_names <- colnames(covar)
# code missing with a string
for (col in cat_cols){
values <- covar[, col][[1]] %>% as.character
print(str_c(col, ' has ', sum(is.na(values)), ' missing values'))
values[is.na(values)] <- 'missing'
covar[, col] <- values %>%  as.factor
}
# format data for input to mgm
n_features <- dim(covar)[2]
col_types <- map(covar, class)
dtypes <- rep('g', n_features)
n_levels <- rep(1, n_features)
X <- matrix(NA, nrow=dim(covar)[1], ncol=n_features)
for(j in 1:n_features){
if(col_types[[j]] == 'factor'){
dtypes[j] <- 'c'
n_levels[j] <- covar[, j][[1]] %>% levels %>% length
X[, j] <- as.numeric(covar[, j][[1]]) - 1
print(colnames(covar)[j])
for(l in 0:(n_levels[j]-1)){
print(str_c(l, ' ', sum(X[, j] == l)))
}
print('')
print('')
} else{
X[, j] <- covar[, j][[1]]
}
}
colnames(X) <- colnames(covar)
covar_gm <- mgm(data=X, type=dtypes, level=n_levels)
A <- round(covar_gm$pairwise$wadj, 2)
rownames(A) <- colnames(covar)
colnames(A) <- colnames(covar)
A[1, ]
names(A[1, ][A[1, ] > 0 ])
names(A[1, ][A[1, ] > 0 ])
names(A[1, ][A[1, ] > 0 ])
# Visualize using qgraph()
library(qgraph)
png(file=str_c(save_dir, 'graphical_model.png'),
width=1000, height=800, # res=5000,
pointsize=15)
qgraph(covar_gm$pairwise$wadj,
edge.color = covar_gm$pairwise$edgecolor,
layout = "spring",
lty=covar_gm$pairwise$edge_lty,
labels =  colnames(covar))
dev.off()
A
A[2, ]
names(A[2, ][A[2, ] > 0 ])
?qgraph
# install required packages
# borrowed from https://stackoverflow.com/questions/9341635/check-for-installed-packages-before-running-install-packages
requiredPackages = c('mgm','tidyverse')
for(p in requiredPackages){
if(!require(p,character.only = TRUE)) install.packages(p)
library(p,character.only = TRUE)
}
library(mgm)
library(tidyverse)
?qgraph
# BiocManager::install("Icens")
# install required packages
# borrowed from https://stackoverflow.com/questions/9341635/check-for-installed-packages-before-running-install-packages
requiredPackages = c('tidyverse','interval', 'ALassoSurvIC')
for(p in requiredPackages){
if(!require(p,character.only = TRUE)) install.packages(p)
library(p,character.only = TRUE)
}
library(tidyverse)
library(interval)
library(ALassoSurvIC)
# setup paths -------------------------------------------------------------
# setup directories
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
# stop("At least one argument must be supplied", call.=FALSE)
top_dir <- './'
top_dir <- '/Users/iaincarmichael/Dropbox/Research/substance_abuse/homelessness_vs_retention/repro_homelessness_retention/'
} else{
top_dir <- args[1]
}
print(top_dir)
temp_save_dir = str_c(top_dir, 'temp_data/')
save_dir = str_c(top_dir, 'results/')
# cov_fpath = str_c(temp_save_dir, 'covariates.csv')
cov_fpath = str_c(temp_save_dir, 'covariates_imputed.csv')
surv_int_fpath = str_c(temp_save_dir, 'ret_intvals.csv')
cat_cols_fpath = str_c(temp_save_dir, 'cat_cols.csv')
# load data ---------------------------------------------------------------
covar <- read_csv(cov_fpath) %>%  select(-EncPatientID)  # drop subject ids
cat_cols <- read_csv(cat_cols_fpath)[[1]]
surv_interval <- read_csv(surv_int_fpath) %>%  select(-EncPatientID)  # drop subject ids
covariates <- colnames(covar)
covar[, 'left'] <- surv_interval[, 'left']
covar[, 'right'] <- surv_interval[, 'right']
# format data -------------------------------------------------------------
# code 'NA' as their own category for categegorical variables
for (col in cat_cols){
values <- covar[, col][[1]] %>% as.character
print(str_c(col, ' has ', sum(is.na(values)), ' missing values'))
values[is.na(values)] <- 'missing'
covar[, col] <- values %>%  as.factor
}
# standardize continuous columns
# impute missing values with mean for continuous variables
n_features <- dim(covar)[2]
for (j in 1:n_features){
col_name <- colnames(covar)[j]
if (!(col_name %in% cat_cols) & !(col_name %in% c('left', 'right'))){
print(str_c('standarizing ', col_name))
# standardize
values <- covar[, j][[1]]
values <- (values - mean(values, na.rm=T)) / sd(values, na.rm=T)
# mean impute i.e. replace with 0 since we standardized
nan_mask <- is.na(values)
print(str_c(col_name, ' has ', sum(nan_mask), ' missinig values'))
values[nan_mask] <- 0.0
covar[, j] <- values
}
}
homlelessness_surv_curves <- icfit(Surv(left, right, type='interval2')~homeless, data=covar)
homlelessness_surv_curves <- icfit(Surv(left, right, type='interval2')~Homelessness, data=covar)
homlelessness_surv_curves <- icfit(Surv(left, right, type='interval2')~Homelessness, data=covar)
png(file=str_c(save_dir, 'homelessness_vs_retention_survival_curve.png'),
width=500, height=400)
plot(homlelessness_surv_curves,
COL=c('red', 'blue'),
YLAB='Retention', XLAB='Days',
shade=FALSE)
# load packages  -----------------------------------------------------------------
# install required packages
# borrowed from https://stackoverflow.com/questions/9341635/check-for-installed-packages-before-running-install-packages
requiredPackages = c('mgm','tidyverse')
for(p in requiredPackages){
if(!require(p,character.only = TRUE)) install.packages(p)
library(p,character.only = TRUE)
}
library(mgm)
library(tidyverse)
# setup paths -------------------------------------------------------------
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
# stop("At least one argument must be supplied", call.=FALSE)
top_dir <- './'
top_dir <- '/Users/iaincarmichael/Dropbox/Research/substance_abuse/homelessness_vs_retention/repro_homelessness_retention/'
} else{
top_dir <- args[1]
}
print(top_dir)
temp_save_dir = str_c(top_dir, 'temp_data/')
save_dir = str_c(top_dir, 'results/')
# cov_fpath = str_c(temp_save_dir, 'covariates.csv')  # raw covariates with NaNs
cov_fpath = str_c(temp_save_dir, 'covariates_imputed.csv')
surv_int_fpath = str_c(temp_save_dir, 'ret_intvals.csv')
cat_cols_fpath = str_c(temp_save_dir, 'cat_cols.csv')
# load data ---------------------------------------------------------------
covar <- read_csv(cov_fpath) %>%  select(-EncPatientID)  # drop subject ids
cat_cols <- read_csv(cat_cols_fpath)[[1]]
surv_interval <- read_csv(surv_int_fpath) %>%  select(-EncPatientID)  # drop subject ids
dim(covar)
var_names <- colnames(covar)
# TODO: what to do about this
# covar <- covar %>% filter(work != '0.0')
# code missing with a string
for (col in cat_cols){
values <- covar[, col][[1]] %>% as.character
print(str_c(col, ' has ', sum(is.na(values)), ' missing values'))
values[is.na(values)] <- 'missing'
covar[, col] <- values %>%  as.factor
}
# format data for input to mgm
n_features <- dim(covar)[2]
col_types <- map(covar, class)
dtypes <- rep('g', n_features)
n_levels <- rep(1, n_features)
X <- matrix(NA, nrow=dim(covar)[1], ncol=n_features)
for(j in 1:n_features){
if(col_types[[j]] == 'factor'){
dtypes[j] <- 'c'
n_levels[j] <- covar[, j][[1]] %>% levels %>% length
X[, j] <- as.numeric(covar[, j][[1]]) - 1
print(colnames(covar)[j])
for(l in 0:(n_levels[j]-1)){
print(str_c(l, ' ', sum(X[, j] == l)))
}
print('')
print('')
} else{
X[, j] <- covar[, j][[1]]
}
}
colnames(X) <- colnames(covar)
# fit graphical model -----------------------------------------------------
covar_gm <- mgm(data=X, type=dtypes, level=n_levels)
# output results ----------------------------------------------------------
A <- round(covar_gm$pairwise$wadj, 2)
rownames(A) <- colnames(covar)
colnames(A) <- colnames(covar)
A[1, ]
names(A[1, ][A[1, ] > 0 ])
# Visualize using qgraph()
library(qgraph)
png(file=str_c(save_dir, 'graphical_model.png'),
width=1000, height=800, # res=5000,
pointsize=20)
qgraph(covar_gm$pairwise$wadj,
edge.color = covar_gm$pairwise$edgecolor,
layout = "spring",
lty=covar_gm$pairwise$edge_lty,
labels =  colnames(covar))
dev.off()
png(file=str_c(save_dir, 'graphical_model.png'),
width=1000, height=800, # res=5000,
pointsize=30)
qgraph(covar_gm$pairwise$wadj,
edge.color = covar_gm$pairwise$edgecolor,
layout = "spring",
lty=covar_gm$pairwise$edge_lty,
labels =  colnames(covar))
dev.off()
png(file=str_c(save_dir, 'graphical_model.png'),
width=1000, height=800, # res=5000,
pointsize=20)
qgraph(covar_gm$pairwise$wadj,
edge.color = covar_gm$pairwise$edgecolor,
layout = "spring",
lty=covar_gm$pairwise$edge_lty,
labels =  colnames(covar))
dev.off()
png(file=str_c(save_dir, 'graphical_model.png'),
width=1000, height=800, # res=5000,
pointsize=15)
qgraph(covar_gm$pairwise$wadj,
edge.color = covar_gm$pairwise$edgecolor,
layout = "spring",
lty=covar_gm$pairwise$edge_lty,
labels =  colnames(covar))
png(file=str_c(save_dir, 'graphical_model.png'),
width=2000, height=1600, # res=5000,
pointsize=15)
qgraph(covar_gm$pairwise$wadj,
edge.color = covar_gm$pairwise$edgecolor,
layout = "spring",
lty=covar_gm$pairwise$edge_lty,
labels =  colnames(covar))
dev.off()
png(file=str_c(save_dir, 'graphical_model.png'),
width=2000, height=1600, # res=5000,
pointsize=20)
qgraph(covar_gm$pairwise$wadj,
edge.color = covar_gm$pairwise$edgecolor,
layout = "spring",
lty=covar_gm$pairwise$edge_lty,
labels =  colnames(covar))
A[1, ]
names(A[1, ][A[1, ] > 0 ])
covar_gm$pairwise$wadj
adj_mat <- covar_gm$pairwise$wadj
rownames(adj_mat) <- colnames(covar)
colames(adj_mat) <- colnames(covar)
colnames(adj_mat) <- colnames(covar)
adj_mat
str(adj_mat)
?save
?save(adj_mat, file='temp.csv')
save(adj_mat, file='temp.csv')
adj_mat
write.csv(adj_mat, file='temp.csv')
adj_mat <- covar_gm$pairwise$wadj
rownames(adj_mat) <- colnames(covar)
colnames(adj_mat) <- colnames(covar)
write.csv(adj_mat, file=str_c(save_dir, 'graphical_model_adj_mat.csv'))
png(file=str_c(save_dir, 'graphical_model.png'),
width=2000, height=1600, # res=5000,
pointsize=15)
# load packages  -----------------------------------------------------------------
# install required packages
# borrowed from https://stackoverflow.com/questions/9341635/check-for-installed-packages-before-running-install-packages
requiredPackages = c('mgm','tidyverse')
for(p in requiredPackages){
if(!require(p,character.only = TRUE)) install.packages(p)
library(p,character.only = TRUE)
}
library(mgm)
library(tidyverse)
# setup paths -------------------------------------------------------------
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
# stop("At least one argument must be supplied", call.=FALSE)
top_dir <- './'
top_dir <- '/Users/iaincarmichael/Dropbox/Research/substance_abuse/homelessness_vs_retention/repro_homelessness_retention/'
} else{
top_dir <- args[1]
}
print(top_dir)
temp_save_dir = str_c(top_dir, 'temp_data/')
save_dir = str_c(top_dir, 'results/')
# cov_fpath = str_c(temp_save_dir, 'covariates.csv')  # raw covariates with NaNs
cov_fpath = str_c(temp_save_dir, 'covariates_imputed.csv')
surv_int_fpath = str_c(temp_save_dir, 'ret_intvals.csv')
cat_cols_fpath = str_c(temp_save_dir, 'cat_cols.csv')
# load data ---------------------------------------------------------------
covar <- read_csv(cov_fpath) %>%  select(-EncPatientID)  # drop subject ids
cat_cols <- read_csv(cat_cols_fpath)[[1]]
surv_interval <- read_csv(surv_int_fpath) %>%  select(-EncPatientID)  # drop subject ids
dim(covar)
var_names <- colnames(covar)
# TODO: what to do about this
# covar <- covar %>% filter(work != '0.0')
# code missing with a string
for (col in cat_cols){
values <- covar[, col][[1]] %>% as.character
print(str_c(col, ' has ', sum(is.na(values)), ' missing values'))
values[is.na(values)] <- 'missing'
covar[, col] <- values %>%  as.factor
}
# format data for input to mgm
n_features <- dim(covar)[2]
col_types <- map(covar, class)
dtypes <- rep('g', n_features)
n_levels <- rep(1, n_features)
X <- matrix(NA, nrow=dim(covar)[1], ncol=n_features)
for(j in 1:n_features){
if(col_types[[j]] == 'factor'){
dtypes[j] <- 'c'
n_levels[j] <- covar[, j][[1]] %>% levels %>% length
X[, j] <- as.numeric(covar[, j][[1]]) - 1
print(colnames(covar)[j])
for(l in 0:(n_levels[j]-1)){
print(str_c(l, ' ', sum(X[, j] == l)))
}
print('')
print('')
} else{
X[, j] <- covar[, j][[1]]
}
}
colnames(X) <- colnames(covar)
# fit graphical model -----------------------------------------------------
covar_gm <- mgm(data=X, type=dtypes, level=n_levels)
# output results ----------------------------------------------------------
A <- round(covar_gm$pairwise$wadj, 2)
rownames(A) <- colnames(covar)
colnames(A) <- colnames(covar)
A[1, ]
names(A[1, ][A[1, ] > 0 ])
# Visualize using qgraph()
library(qgraph)
png(file=str_c(save_dir, 'graphical_model.png'),
width=2000, height=1600, # res=5000,
pointsize=15)
qgraph(covar_gm$pairwise$wadj,
edge.color = covar_gm$pairwise$edgecolor,
layout = "spring",
lty=covar_gm$pairwise$edge_lty,
labels =  colnames(covar))
dev.off()
# save adjacency matrix
adj_mat <- covar_gm$pairwise$wadj
rownames(adj_mat) <- colnames(covar)
colnames(adj_mat) <- colnames(covar)
write.csv(adj_mat, file=str_c(save_dir, 'graphical_model_adj_mat.csv'))
